<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>TransmitSMS: Application Configuration</title>
    <link href="/eloqua-service/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="/eloqua-service/assets/css/main.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
  </head>
  <body>
    <div class="disabler"></div>
    <div id="consumer" class="container" style="width: 900px; text-align: center; padding-top: 40px">
            <img src="/eloqua-service/assets/images/eloqua-connect_thumb.png" alt="Connect to Burst SMS" style="max-width: 300px;" onerror="this.style.display='none'">
            <br/><br/>
            
            <!-- Status Messages -->
            <div v-if="status.success || status.error" 
                 v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" 
                 class="alert alert-dismissible fade" 
                 role="alert">
                {{ status.success || status.error }}
            </div>

            <!-- Left Column: Connection Settings -->
            <div class="container" style="width: 47%;float: left;text-align:left;margin-left:25px;border-right: 2px solid #ccc;min-height: 600px;">
                <h4 style="font-size: 20px; font-weight: bold; text-align: left;">
                    Connection
                </h4>
                <br/>
                <div class="form-group">
                    <label for="transmitsms_api_key" style="width:320px; text-align:left;">Burst SMS API Key</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.transmitsms_api_key"
                           placeholder="Enter your API Key"/>
                </div>
                <div class="form-group">
                    <label for="transmitsms_api_secret" style="width:320px; text-align:left;">Burst SMS API Secret</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.transmitsms_api_secret"
                           placeholder="Enter your API Secret"/>
                </div>
                <div class="form-group">
                    <label for="default_country" style="width:320px; text-align:left;">Default Country for Number Formatting</label>
                    <select v-model="consumer.default_country" style="width:320px; text-align:left;" class="form-control">
                        <option v-for="country in countries" v-bind:value="country.name" :key="country.name">
                            {{ country.name }}
                        </option>
                    </select>
                    <p style="width:320px; text-align:left; font-size:11px;"><i>Number will be formatted for delivery to this country if contact has no country defined.</i></p>
                </div>
                <div class="form-group">
                    <label for="dlr_callback" style="width:320px; text-align:left;">Delivery Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.dlr_callback" 
                           readonly/>
                </div>
                <div class="form-group">
                    <label for="reply_callback" style="width:320px; text-align:left;">Reply Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.reply_callback" 
                           readonly/>
                </div>
                <div class="form-group">
                    <label for="link_hits_callback" style="width:320px; text-align:left;">Link Hits Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.link_hits_callback" 
                           readonly/>
                </div>
                <p style="font-size: 12px;">Your Burst SMS API Key and secret can be found here: <a target="_blank" href="https://burst.transmitsms.com/profile">https://burst.transmitsms.com/profile</a></p>
                <p style="font-size: 12px;">No Account? Register here: <a target="_blank" href="https://go.burstsms.com">https://go.burstsms.com</a></p>
            </div>

            <!-- Right Column: Custom Object Mapping -->
            <div class="container" style="width: 47%; float:right; text-align:left; padding-left:40px; min-height: 600px;">
                <h4 style="font-size: 20px; font-weight: bold; text-align: left;">
                    Custom Object Mapping
                </h4>
                <div class="form-group">
                    <label for="actionidx" style="width:320px; text-align:left;">Action Type</label>
                    <select v-on:change="getFields()" v-model="actionidx" style="width:320px; text-align:left;" class="form-control">
                        <option value="sendsms">Send SMS</option>
                        <option value="receivesms">Received SMS</option>
                        <option value="incomingsms">Incoming SMS</option>
                        <option value="tracked_link">SMS Link Hit</option>
                    </select>
                    <p style="width:320px; text-align:left; font-size:11px;"><i>You can map custom object fields per each option.</i></p>
                </div>
                <div class="form-group">
                    <label for="custom_object" style="width:320px; text-align:left;">Custom Object</label>
                    <v-select  
                        label="name"
                        style="width:320px; text-align:left;" 
                        v-model="consumer.actions[actionidx].custom_object_id" 
                        :reduce="element => element.id" 
                        :options="comap" 
                        @search="fetchOptionsmap" 
                        @input="getFields()"
                        placeholder="Select Custom Object">
                    </v-select>
                </div>
                
                <!-- Field Mappings -->
                <div class="form-group">
                    <label style="width:320px; text-align:left;">Map mobile to:</label>
                    <select v-model="consumer.actions[actionidx].mobile_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group">
                    <label style="width:320px; text-align:left;">Map virtual number to:</label>
                    <select v-model="consumer.actions[actionidx].vn_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group">
                    <label style="width:320px; text-align:left;">Map email to:</label>
                    <select v-model="consumer.actions[actionidx].email_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group">
                    <label style="width:320px; text-align:left;">Map campaign title to:</label>
                    <select v-model="consumer.actions[actionidx].title_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                
                <!-- Conditional Fields for Send SMS -->
                <div class="form-group" v-if="actionidx == 'sendsms'">
                    <label style="width:320px; text-align:left;">Map notification to:</label>
                    <select v-model="consumer.actions[actionidx].notification_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group" v-if="actionidx == 'sendsms'">
                    <label style="width:320px; text-align:left;">Map outgoing message to:</label>
                    <select v-model="consumer.actions[actionidx].outgoing_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                
                <!-- Conditional Fields for Receive/Incoming SMS -->
                <div class="form-group" v-if="actionidx != 'sendsms' && actionidx != 'tracked_link'">
                    <label style="width:320px; text-align:left;">Map incoming message to:</label>
                    <select v-model="consumer.actions[actionidx].response_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                
                <!-- Conditional Fields for Link Hits -->
                <div class="form-group" v-if="actionidx == 'tracked_link'">
                    <label style="width:320px; text-align:left;">Map Link Hit count to:</label>
                    <select v-model="consumer.actions[actionidx].link_hits" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group" v-if="actionidx == 'tracked_link'">
                    <label style="width:320px; text-align:left;">Map URL to:</label>
                    <select v-model="consumer.actions[actionidx].url_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
                <div class="form-group" v-if="actionidx == 'tracked_link'">
                    <label style="width:320px; text-align:left;">Map Original URL to:</label>
                    <select v-model="consumer.actions[actionidx].originalurl_field" style="width:320px; text-align:left;" class="form-control">
                        <option value="">-- Select Field --</option>
                        <option v-for="field in fields[actionidx]" v-bind:value="field.internalName" :key="field.internalName">
                            {{ field.name }}
                        </option>
                    </select>
                </div>
            </div>
            
            <!-- Clear float -->
            <div style="clear: both;"></div>

            <!-- Save Button -->
            <div class="container" style="width: 100%; margin-top:30px; margin-bottom: 30px;">
                <button id="btnSave" type="button" v-on:click="saveConsumer()" class="btn btn-default" :disabled="saving">
                    <span v-if="!saving">Update</span>
                    <span v-if="saving">Saving...</span>
                </button>
            </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
    <script src="/eloqua-service/assets/js/axios.min.js"></script>
    <script src="https://unpkg.com/vue-select@3.0.0"></script>
    <script type="text/javascript">
    // Parse server data
    var all_custom_object_fields = <%-JSON.stringify(all_custom_object_fields)%>;
    var rawConsumer = <%-JSON.stringify(consumer)%>;
    var countries = <%-JSON.stringify(countries)%>;

    // Ensure consumer has proper structure
    if (!rawConsumer.actions) {
        rawConsumer.actions = {
            sendsms: {},
            receivesms: {},
            incomingsms: {},
            tracked_link: {}
        };
    }

    ['sendsms', 'receivesms', 'incomingsms', 'tracked_link'].forEach(function(actionType) {
        if (!rawConsumer.actions[actionType]) {
            rawConsumer.actions[actionType] = {};
        }
    });

    if (!rawConsumer.default_country) {
        rawConsumer.default_country = 'Australia';
    }

    Vue.component('v-select', VueSelect.VueSelect);
    
    var app = new Vue({
        el: '#consumer',
        data: {
            consumer: rawConsumer,
            status: {},
            countries: countries,
            customObjects: [],  // Will be loaded lazily
            customObjectsCache: {},  // Cache loaded custom objects
            allFields: all_custom_object_fields,
            fieldsCache: {},  // Cache loaded fields
            actionidx: 'sendsms',
            currentFields: [],
            fade: false,
            saving: false,
            loadingCustomObjects: false,
            loadingFields: false
        },
        methods: {
            // Lazy load custom objects with search
            fetchCustomObjects: function(search, loading) {
                var vm = this;
                
                // Check cache first
                var cacheKey = search || 'all';
                if (vm.customObjectsCache[cacheKey]) {
                    vm.customObjects = vm.customObjectsCache[cacheKey];
                    return;
                }
                
                if (loading) loading(true);
                vm.loadingCustomObjects = true;
                
                axios.get('/eloqua/action/ajax/customobjects/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/customObject', {
                    params: { search: search || '', count: 100 }
                })
                .then(function(response) {
                    vm.customObjects = response.data.elements || [];
                    vm.customObjectsCache[cacheKey] = vm.customObjects;
                    console.log('Custom objects loaded:', vm.customObjects.length);
                    if (loading) loading(false);
                    vm.loadingCustomObjects = false;
                })
                .catch(function(error) {
                    console.error('Error loading custom objects:', error);
                    vm.status = {
                        error: 'Failed to load custom objects: ' + (error.response?.data?.message || error.message)
                    };
                    vm.fade = true;
                    setTimeout(function() {
                        vm.fade = false;
                        vm.status = {};
                    }, 5000);
                    if (loading) loading(false);
                    vm.loadingCustomObjects = false;
                });
            },
            
            switchActionType: function() {
                this.loadFieldsForCurrentAction();
            },
            
            onCustomObjectChange: function(customObjectId) {
                this.loadFieldsForCurrentAction();
            },
            
            loadFieldsForCurrentAction: function() {
                var vm = this;
                
                // Check if fields are pre-loaded
                if (vm.allFields[vm.actionidx] && vm.allFields[vm.actionidx].length > 0) {
                    vm.currentFields = vm.allFields[vm.actionidx];
                    console.log('Using pre-loaded fields for', vm.actionidx);
                    return;
                }
                
                var customObjectId = vm.consumer.actions[vm.actionidx]?.custom_object_id;
                
                if (!customObjectId) {
                    vm.currentFields = [];
                    return;
                }
                
                // Check cache
                if (vm.fieldsCache[customObjectId]) {
                    vm.currentFields = vm.fieldsCache[customObjectId];
                    vm.allFields[vm.actionidx] = vm.currentFields;
                    console.log('Using cached fields for', customObjectId);
                    return;
                }
                
                // Fetch fields
                vm.loadingFields = true;
                console.log('Fetching fields for', customObjectId);
                
                axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
                    .then(function(response) {
                        vm.currentFields = response.data.fields || [];
                        vm.allFields[vm.actionidx] = vm.currentFields;
                        vm.fieldsCache[customObjectId] = vm.currentFields;
                        vm.loadingFields = false;
                        console.log('Fields loaded:', vm.currentFields.length);
                    })
                    .catch(function(error) {
                        console.error('Error fetching fields:', error);
                        vm.currentFields = [];
                        vm.loadingFields = false;
                        vm.status = {
                            error: 'Failed to load fields: ' + (error.response?.data?.message || error.message)
                        };
                        vm.fade = true;
                        setTimeout(function() {
                            vm.fade = false;
                            vm.status = {};
                        }, 5000);
                    });
            },
            
            saveConsumer: function() {
                var vm = this;

                if (!vm.consumer.transmitsms_api_key || !vm.consumer.transmitsms_api_secret) {
                    vm.status = {
                        error: 'API Key and Secret are required'
                    };
                    vm.fade = true;
                    setTimeout(function() {
                        vm.fade = false;
                        vm.status = {};
                    }, 5000);
                    return;
                }

                vm.saving = true;
                
                axios.post(location.pathname + location.search, {
                    consumer: vm.consumer
                })
                .then(function(response) {
                    vm.saving = false;
                    vm.fade = true;
                    vm.status = {
                        success: 'Configuration successfully updated'
                    };

                    setTimeout(function() {
                        vm.fade = false;
                        vm.status = {};
                    }, 5000);
                })
                .catch(function (error) {
                    vm.saving = false;
                    vm.fade = true;
                    vm.status = {
                        error: error.response?.data?.message || 'Failed to update configuration'
                    };

                    setTimeout(function() {
                        vm.fade = false;
                        vm.status = {};
                    }, 5000);
                });
            }
        },
        
        mounted: function () {
            var vm = this;
            console.log('App mounted');
            console.log('Consumer:', vm.consumer.installId);
            console.log('Pre-loaded fields:', Object.keys(vm.allFields));
            
            // Load fields for current action
            vm.loadFieldsForCurrentAction();
            
            // Lazy load custom objects (will be triggered by vue-select when opened)
            vm.fetchCustomObjects('', null);
        }
    });
</script>
  </body>
</html>