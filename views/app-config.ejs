<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>TransmitSMS: Application Configuration</title>
    <link href="/eloqua-service/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="/eloqua-service/assets/css/main.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
    <style>
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #4CAF50;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
    </style>
  </head>
  <body>
    <div class="disabler"></div>
    <div id="consumer" class="container" style="width: 900px; text-align: center; padding-top: 40px">
            <img src="/eloqua-service/assets/images/eloqua-connect_thumb.png" alt="Connect to Burst SMS" style="max-width: 300px;" onerror="this.style.display='none'">
            <br/><br/>
            
            <!-- Status Messages -->
            <div v-if="status.success || status.error" 
                 v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" 
                 class="alert alert-dismissible fade" 
                 role="alert">
                {{ status.success || status.error }}
            </div>

            <!-- Left Column: Connection Settings -->
            <div class="container" style="width: 47%;float: left;text-align:left;margin-left:25px;border-right: 2px solid #ccc;min-height: 600px;">
                <h4 style="font-size: 20px; font-weight: bold; text-align: left;">
                    Connection
                </h4>
                <br/>
                <div class="form-group">
                    <label for="transmitsms_api_key" style="width:320px; text-align:left;">Burst SMS API Key</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.transmitsms_api_key"
                           placeholder="Enter your API Key"/>
                </div>
                <div class="form-group">
                    <label for="transmitsms_api_secret" style="width:320px; text-align:left;">Burst SMS API Secret</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.transmitsms_api_secret"
                           placeholder="Enter your API Secret"/>
                </div>
                <div class="form-group">
                    <label for="default_country" style="width:320px; text-align:left;">Default Country for Number Formatting</label>
                    <select v-model="consumer.default_country" style="width:320px; text-align:left;" class="form-control">
                        <option v-for="country in countries" v-bind:value="country.name" :key="country.name">
                            {{ country.name }}
                        </option>
                    </select>
                    <p style="width:320px; text-align:left; font-size:11px;"><i>Number will be formatted for delivery to this country if contact has no country defined.</i></p>
                </div>
                <div class="form-group">
                    <label for="dlr_callback" style="width:320px; text-align:left;">Delivery Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.dlr_callback" 
                           readonly/>
                </div>
                <div class="form-group">
                    <label for="reply_callback" style="width:320px; text-align:left;">Reply Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.reply_callback" 
                           readonly/>
                </div>
                <div class="form-group">
                    <label for="link_hits_callback" style="width:320px; text-align:left;">Link Hits Callback URL</label>
                    <input type="text" 
                           style="width:320px; text-align:left;" 
                           class="form-control" 
                           v-model="consumer.link_hits_callback" 
                           readonly/>
                </div>
                <p style="font-size: 12px;">Your Burst SMS API Key and secret can be found here: <a target="_blank" href="https://burst.transmitsms.com/profile">https://burst.transmitsms.com/profile</a></p>
                <p style="font-size: 12px;">No Account? Register here: <a target="_blank" href="https://go.burstsms.com">https://go.burstsms.com</a></p>
            </div>

            <!-- Right Column: Custom Object Mapping -->
            <div class="container" style="width: 47%; float:right; text-align:left; padding-left:40px; min-height: 600px;">
                <h4 style="font-size: 20px; font-weight: bold; text-align: left;">
                    Custom Object Mapping
                </h4>
                <div class="form-group">
                    <label for="actionidx" style="width:320px; text-align:left;">Action Type</label>
                    <select v-on:change="switchActionType()" v-model="actionidx" style="width:320px; text-align:left;" class="form-control">
                        <option value="sendsms">Send SMS</option>
                        <option value="receivesms">Received SMS</option>
                        <option value="incomingsms">Incoming SMS</option>
                        <option value="tracked_link">SMS Link Hit</option>
                    </select>
                    <p style="width:320px; text-align:left; font-size:11px;"><i>You can map custom object fields per each option.</i></p>
                </div>
                <div class="form-group">
                    <label for="custom_object" style="width:320px; text-align:left;">
                        Custom Object 
                        <span v-if="consumer.actions[actionidx].custom_object_id" style="font-size: 10px; color: #666;">
                            (ID: {{ consumer.actions[actionidx].custom_object_id }})
                        </span>
                    </label>
                    <v-select  
                        :key="actionidx + '-' + (consumer.actions[actionidx].custom_object_id || 'none')"
                        label="name"
                        style="width:320px; text-align:left;" 
                        v-model="consumer.actions[actionidx].custom_object_id" 
                        :reduce="element => element.id" 
                        :options="customObjects" 
                        @search="fetchCustomObjects"
                        @input="onCustomObjectChange"
                        placeholder="Select Custom Object">
                        <template #no-options>
                            <span v-if="loadingCustomObjects">Loading...</span>
                            <span v-else>Type to search custom objects</span>
                        </template>
                    </v-select>
                </div>
                
                <!-- Field Mappings (shown when custom object is selected and fields are loaded) -->
                <div v-if="loadingFields" style="padding: 20px; text-align: center;">
                    <div class="spinner"></div>
                    <p style="margin-top: 10px;">Loading fields...</p>
                </div>
                
                <div v-else-if="currentFields.length > 0">
                    <div class="form-group">
                        <label style="width:320px; text-align:left;">Map mobile to:</label>
                        <select v-model="consumer.actions[actionidx].mobile_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label style="width:320px; text-align:left;">Map virtual number to:</label>
                        <select v-model="consumer.actions[actionidx].vn_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label style="width:320px; text-align:left;">Map email to:</label>
                        <select v-model="consumer.actions[actionidx].email_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label style="width:320px; text-align:left;">Map campaign title to:</label>
                        <select v-model="consumer.actions[actionidx].title_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    
                    <!-- Conditional Fields for Send SMS -->
                    <div class="form-group" v-if="actionidx == 'sendsms'">
                        <label style="width:320px; text-align:left;">Map notification to:</label>
                        <select v-model="consumer.actions[actionidx].notification_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group" v-if="actionidx == 'sendsms'">
                        <label style="width:320px; text-align:left;">Map outgoing message to:</label>
                        <select v-model="consumer.actions[actionidx].outgoing_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    
                    <!-- Conditional Fields for Receive/Incoming SMS -->
                    <div class="form-group" v-if="actionidx != 'sendsms' && actionidx != 'tracked_link'">
                        <label style="width:320px; text-align:left;">Map incoming message to:</label>
                        <select v-model="consumer.actions[actionidx].response_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    
                    <!-- Conditional Fields for Link Hits -->
                    <div class="form-group" v-if="actionidx == 'tracked_link'">
                        <label style="width:320px; text-align:left;">Map Link Hit count to:</label>
                        <select v-model="consumer.actions[actionidx].link_hits" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group" v-if="actionidx == 'tracked_link'">
                        <label style="width:320px; text-align:left;">Map URL to:</label>
                        <select v-model="consumer.actions[actionidx].url_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                    <div class="form-group" v-if="actionidx == 'tracked_link'">
                        <label style="width:320px; text-align:left;">Map Original URL to:</label>
                        <select v-model="consumer.actions[actionidx].originalurl_field" style="width:320px; text-align:left;" class="form-control">
                            <option value="">-- Select Field --</option>
                            <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                                {{ field.name }}
                            </option>
                        </select>
                    </div>
                </div>
                <div v-else style="padding: 20px; background: #f5f5f5; border-radius: 4px; margin-top: 10px;">
                    <p style="margin: 0; color: #666; font-size: 14px;">
                        <span v-if="consumer.actions[actionidx].custom_object_id">
                            Loading fields for custom object...
                        </span>
                        <span v-else>
                            Select a custom object to map fields
                        </span>
                    </p>
                </div>
            </div>
            
            <!-- Clear float -->
            <div style="clear: both;"></div>

            <!-- Save Button -->
            <div class="container" style="width: 100%; margin-top:30px; margin-bottom: 30px;">
                <button id="btnSave" type="button" v-on:click="saveConsumer()" class="btn btn-default" :disabled="saving">
                    <span v-if="!saving">Update</span>
                    <span v-if="saving">Saving...</span>
                </button>
            </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
    <script src="/eloqua-service/assets/js/axios.min.js"></script>
    <script src="https://unpkg.com/vue-select@3.0.0"></script>
    
    <script type="text/javascript">
        // Parse server data with safe defaults
        var all_custom_object_fields;
        var rawConsumer;
        var countries;

        try {
            all_custom_object_fields = <%-JSON.stringify(all_custom_object_fields || {sendsms:[],receivesms:[],incomingsms:[],tracked_link:[]})%>;
        } catch(e) {
            console.error('Error parsing all_custom_object_fields:', e);
            all_custom_object_fields = {
                sendsms: [],
                receivesms: [],
                incomingsms: [],
                tracked_link: []
            };
        }

        try {
            rawConsumer = <%-JSON.stringify(consumer)%>;
        } catch(e) {
            console.error('Error parsing consumer:', e);
            alert('Error loading configuration data');
            rawConsumer = { actions: {} };
        }

        try {
            countries = <%-JSON.stringify(countries)%>;
        } catch(e) {
            console.error('Error parsing countries:', e);
            countries = [];
        }

        // Ensure consumer has proper structure
        if (!rawConsumer.actions) {
            rawConsumer.actions = {
                sendsms: {},
                receivesms: {},
                incomingsms: {},
                tracked_link: {}
            };
        }

        // Ensure each action type exists
        ['sendsms', 'receivesms', 'incomingsms', 'tracked_link'].forEach(function(actionType) {
            if (!rawConsumer.actions[actionType]) {
                rawConsumer.actions[actionType] = {};
            }
        });

        // Ensure all_custom_object_fields has all action types
        ['sendsms', 'receivesms', 'incomingsms', 'tracked_link'].forEach(function(actionType) {
            if (!all_custom_object_fields[actionType]) {
                all_custom_object_fields[actionType] = [];
            }
        });

        // Set default values
        if (!rawConsumer.default_country) {
            rawConsumer.default_country = 'Australia';
        }

        Vue.component('v-select', VueSelect.VueSelect);
        
        var app = new Vue({
            el: '#consumer',
            data: {
                consumer: rawConsumer,
                status: {},
                countries: countries,
                customObjects: [],
                customObjectsCache: {},
                allFields: all_custom_object_fields,
                fieldsCache: {},
                actionidx: 'sendsms',
                currentFields: [],
                previousCustomObjectIds: {
                    sendsms: null,
                    receivesms: null,
                    incomingsms: null,
                    tracked_link: null
                },
                fade: false,
                saving: false,
                loadingCustomObjects: false,
                loadingFields: false
            },
            watch: {
                // Watch for changes in the custom_object_id for current action type
                'consumer.actions': {
                    handler: function(newVal, oldVal) {
                        console.log('Consumer actions changed');
                    },
                    deep: true
                }
            },
            methods: {
                fetchCustomObjects: function(search, loading) {
                    var vm = this;
                    
                    var cacheKey = search || 'all';
                    if (vm.customObjectsCache[cacheKey]) {
                        vm.customObjects = vm.customObjectsCache[cacheKey];
                        if (loading) loading(false);
                        return;
                    }
                    
                    if (loading) loading(true);
                    vm.loadingCustomObjects = true;
                    
                    axios.get('/eloqua/action/ajax/customobjects/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/customObject', {
                        params: { search: search || '', count: 100 }
                    })
                    .then(function(response) {
                        vm.customObjects = response.data.elements || [];
                        vm.customObjectsCache[cacheKey] = vm.customObjects;
                        console.log('Custom objects loaded:', vm.customObjects.length);
                        if (loading) loading(false);
                        vm.loadingCustomObjects = false;
                    })
                    .catch(function(error) {
                        console.error('Error loading custom objects:', error);
                        vm.customObjects = [];
                        vm.status = {
                            error: 'Failed to load custom objects: ' + (error.response?.data?.message || error.message)
                        };
                        vm.fade = true;
                        setTimeout(function() {
                            vm.fade = false;
                            vm.status = {};
                        }, 5000);
                        if (loading) loading(false);
                        vm.loadingCustomObjects = false;
                    });
                },
                
                switchActionType: function() {
                    var vm = this;
                    console.log('=== Switching Action Type ===');
                    console.log('New action type:', vm.actionidx);
                    console.log('Custom object for this action:', vm.consumer.actions[vm.actionidx]?.custom_object_id);
                    console.log('Stored fields:', vm.allFields[vm.actionidx]?.length || 0);
                    
                    // Update tracking
                    vm.previousCustomObjectIds[vm.actionidx] = vm.consumer.actions[vm.actionidx]?.custom_object_id || null;
                    
                    // Force Vue to re-render the v-select by using nextTick
                    vm.$nextTick(function() {
                        // Load fields for this action type
                        vm.loadFieldsForCurrentAction();
                    });
                },
                
                onCustomObjectChange: function(customObjectId) {
                    var vm = this;
                    var currentActionType = vm.actionidx;
                    var previousId = vm.previousCustomObjectIds[currentActionType];
                    
                    console.log('=== Custom Object Change ===');
                    console.log('[' + currentActionType + '] Changed from', previousId, 'to', customObjectId);
                    
                    // If clearing (X button clicked)
                    if (!customObjectId) {
                        console.log('[' + currentActionType + '] Clearing custom object and fields');
                        vm.clearFieldMappingsForActionType(currentActionType);
                        vm.currentFields = [];
                        vm.previousCustomObjectIds[currentActionType] = null;
                        vm.allFields[currentActionType] = [];
                        return;
                    }
                    
                    // If changed to different custom object
                    if (customObjectId !== previousId) {
                        console.log('[' + currentActionType + '] New custom object selected - clearing field mappings');
                        vm.clearFieldMappingsForActionType(currentActionType);
                        vm.currentFields = [];
                        vm.previousCustomObjectIds[currentActionType] = customObjectId;
                    }
                    
                    // Load fields
                    vm.loadFieldsForCurrentAction();
                },
                
                clearFieldMappingsForActionType: function(actionType) {
                    console.log('Clearing field mappings for:', actionType);
                    
                    if (this.consumer.actions[actionType]) {
                        // Use Vue.set to ensure reactivity
                        this.$set(this.consumer.actions[actionType], 'mobile_field', '');
                        this.$set(this.consumer.actions[actionType], 'vn_field', '');
                        this.$set(this.consumer.actions[actionType], 'email_field', '');
                        this.$set(this.consumer.actions[actionType], 'title_field', '');
                        
                        if (actionType === 'sendsms') {
                            this.$set(this.consumer.actions[actionType], 'notification_field', '');
                            this.$set(this.consumer.actions[actionType], 'outgoing_field', '');
                        } else if (actionType === 'receivesms' || actionType === 'incomingsms') {
                            this.$set(this.consumer.actions[actionType], 'response_field', '');
                        } else if (actionType === 'tracked_link') {
                            this.$set(this.consumer.actions[actionType], 'link_hits', '');
                            this.$set(this.consumer.actions[actionType], 'url_field', '');
                            this.$set(this.consumer.actions[actionType], 'originalurl_field', '');
                        }
                    }
                    
                    console.log('Field mappings cleared for', actionType);
                },
                
                loadFieldsForCurrentAction: function() {
                    var vm = this;
                    var currentActionType = vm.actionidx;
                    var customObjectId = vm.consumer.actions[currentActionType]?.custom_object_id;
                    
                    console.log('=== Loading Fields ===');
                    console.log('[' + currentActionType + '] Custom object:', customObjectId);
                    
                    if (!customObjectId) {
                        console.log('[' + currentActionType + '] No custom object, clearing fields');
                        vm.currentFields = [];
                        return;
                    }
                    
                    // Check if we already have these fields loaded
                    if (vm.allFields[currentActionType] && 
                        vm.allFields[currentActionType].length > 0 && 
                        vm.previousCustomObjectIds[currentActionType] === customObjectId) {
                        console.log('[' + currentActionType + '] Using stored fields:', vm.allFields[currentActionType].length);
                        vm.currentFields = vm.allFields[currentActionType];
                        return;
                    }
                    
                    // Check cache by custom object ID
                    if (vm.fieldsCache[customObjectId]) {
                        console.log('[' + currentActionType + '] Using cached fields:', vm.fieldsCache[customObjectId].length);
                        vm.currentFields = vm.fieldsCache[customObjectId];
                        vm.allFields[currentActionType] = vm.currentFields;
                        return;
                    }
                    
                    // Fetch from API
                    vm.loadingFields = true;
                    console.log('[' + currentActionType + '] Fetching fields from API...');
                    
                    axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
                        .then(function(response) {
                            var fields = response.data.fields || [];
                            console.log('[' + currentActionType + '] Fields fetched:', fields.length);
                            
                            vm.currentFields = fields;
                            vm.fieldsCache[customObjectId] = fields;
                            vm.allFields[currentActionType] = fields;
                            vm.loadingFields = false;
                        })
                        .catch(function(error) {
                            console.error('[' + currentActionType + '] Error fetching fields:', error);
                            vm.currentFields = [];
                            vm.loadingFields = false;
                            vm.status = {
                                error: 'Failed to load fields: ' + (error.response?.data?.message || error.message)
                            };
                            vm.fade = true;
                            setTimeout(function() {
                                vm.fade = false;
                                vm.status = {};
                            }, 5000);
                        });
                },
                
                saveConsumer: function() {
                    var vm = this;

                    if (!vm.consumer.transmitsms_api_key || !vm.consumer.transmitsms_api_secret) {
                        vm.status = {
                            error: 'API Key and Secret are required'
                        };
                        vm.fade = true;
                        setTimeout(function() {
                            vm.fade = false;
                            vm.status = {};
                        }, 5000);
                        return;
                    }

                    vm.saving = true;
                    
                    console.log('Saving consumer configuration...');
                    console.log('Actions:', JSON.stringify(vm.consumer.actions, null, 2));
                    
                    axios.post(location.pathname + location.search, {
                        consumer: vm.consumer
                    })
                    .then(function(response) {
                        vm.saving = false;
                        vm.fade = true;
                        console.log("Configuration saved successfully");
                        vm.status = {
                            success: 'Configuration successfully updated'
                        };

                        setTimeout(function() {
                            vm.fade = false;
                            vm.status = {};
                        }, 5000);
                    })
                    .catch(function (error) {
                        vm.saving = false;
                        vm.fade = true;
                        console.error("Error saving configuration", error);
                        vm.status = {
                            error: error.response?.data?.message || 'Failed to update configuration'
                        };

                        setTimeout(function() {
                            vm.fade = false;
                            vm.status = {};
                        }, 5000);
                    });
                }
            },
            
            mounted: function () {
                var vm = this;
                console.log('=== App Configuration Mounted ===');
                console.log('Consumer ID:', vm.consumer.installId);
                console.log('Site ID:', vm.consumer.SiteId);
                
                // Initialize tracking for all action types
                ['sendsms', 'receivesms', 'incomingsms', 'tracked_link'].forEach(function(actionType) {
                    var coId = vm.consumer.actions[actionType]?.custom_object_id || null;
                    vm.previousCustomObjectIds[actionType] = coId;
                    console.log('[' + actionType + '] Initialized - Custom Object:', coId, '- Fields:', vm.allFields[actionType]?.length || 0);
                });
                
                // Load fields for initial action type
                vm.loadFieldsForCurrentAction();
                
                // Load custom objects
                vm.fetchCustomObjects('', null);
            }
        });
    </script>
  </body>
</html>