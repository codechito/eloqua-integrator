<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>TransmitSMS: Configure Action Service</title>

    <link href="/eloqua-service/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="/eloqua-service/assets/css/main.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
    <style type="text/css">
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #4CAF50;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        display: inline-block;
        margin-right: 10px;
      }

      .two-column-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
      }

      .two-column-row .column-left {
        width: 48%;
      }

      .two-column-row .column-right {
        width: 48%;
      }

      .full-width {
        width: 100%;
        margin-bottom: 15px;
      }

      .form-control {
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .form-control:focus {
        border-color: #66afe9;
        outline: 0;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102,175,233,.6);
      }

      .form-group {
        margin-bottom: 15px;
      }

      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 14px;
      }

      .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
      }

      .alert-success {
        color: #3c763d;
        background-color: #dff0d8;
        border-color: #d6e9c6;
      }

      .alert-danger {
        color: #a94442;
        background-color: #f2dede;
        border-color: #ebccd1;
      }

      .alert.fade {
        opacity: 0;
        transition: opacity 0.15s linear;
      }

      .alert.fade.in {
        opacity: 1;
      }

      .btn {
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        font-size: 14px;
        font-weight: normal;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        cursor: pointer;
        border: 1px solid transparent;
        border-radius: 4px;
      }

      .btn-default {
        color: #333;
        background-color: #fff;
        border-color: #ccc;
      }

      .btn-default:hover {
        color: #333;
        background-color: #e6e6e6;
        border-color: #adadad;
      }

      .btn-default:disabled {
        opacity: 0.65;
        cursor: not-allowed;
      }

      .v-select .vs__dropdown-toggle {
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .v-select.vs--open .vs__dropdown-toggle {
        border-color: #66afe9;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102,175,233,.6);
      }

      textarea.form-control {
        height: auto;
      }

      .merge-toolbar {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 10px;
        padding: 10px;
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      .merge-toolbar-row {
        display: flex;
        gap: 15px;
        align-items: flex-end;
      }

      .merge-section {
        display: flex;
        flex-direction: column;
      }

      .merge-section label {
        font-size: 11px;
        font-weight: bold;
        margin-bottom: 3px;
        text-align: left;
      }

      .merge-section select,
      .merge-section .v-select {
        height: 27px !important;
        font-size: 11px;
      }

      .merge-section select {
        padding: 2px 6px;
      }

      .merge-section .v-select .vs__dropdown-toggle {
        min-height: 27px;
        height: 27px;
        padding: 0 6px;
      }

      .merge-section .v-select .vs__selected-options {
        padding: 0;
        min-height: 25px;
      }

      .merge-section .v-select .vs__selected {
        font-size: 11px;
        line-height: 25px;
        margin: 0;
        padding: 0 2px;
      }

      .merge-section .v-select .vs__search {
        font-size: 11px;
        line-height: 25px;
        margin: 0;
        padding: 0 2px;
      }

      .merge-section .v-select .vs__actions {
        padding: 0 3px;
      }

      .merge-section .v-select input {
        height: 25px;
      }

      .label-with-checkbox {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
      }

      .label-with-checkbox label {
        margin: 0;
      }

      .label-with-checkbox .checkbox-wrapper {
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .label-with-checkbox .checkbox-wrapper label {
        font-weight: normal;
        font-size: 12px;
      }
    </style>
  </head>
  <body>
    <div id="sendsmsaction" class="container" style="width: 600px; padding: 20px;">
      <form method="post">
        <h4 style="font-size: 20px; font-weight: bold; text-align: center; margin-bottom: 20px;">
          <img src="/eloqua-service/assets/images/send-sms-el-icon.png" onerror="this.style.display='none'" style="vertical-align: middle;">&nbsp;Create your Text Message
        </h4>
        
        <div v-if="status.success || status.error" v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" class="alert fade" role="alert">
          {{ status.success || status.error }}
        </div>

        <!-- Row 1: Sender ID | Recipient Field -->
        <div class="two-column-row">
          <div class="column-left">
            <div class="form-group">
              <label>Sender ID</label>
              <select v-model="instance.caller_id" class="form-control" :disabled="loadingSenderIds">
                <option value="">{{ loadingSenderIds ? 'Loading...' : 'Default' }}</option>
                <optgroup v-if="sender_ids['Virtual Number'] && sender_ids['Virtual Number'].length" label="Virtual Number">
                  <option v-for="number in sender_ids['Virtual Number']" v-bind:value="number" :key="'vn-' + number">{{ number }}</option>
                </optgroup>
                <optgroup v-if="sender_ids['Business Name'] && sender_ids['Business Name'].length" label="Business Name">
                  <option v-for="number in sender_ids['Business Name']" v-bind:value="number" :key="'bn-' + number">{{ number }}</option>
                </optgroup>
                <optgroup v-if="sender_ids['Mobile Number'] && sender_ids['Mobile Number'].length" label="Mobile Number">
                  <option v-for="number in sender_ids['Mobile Number']" v-bind:value="number" :key="'mn-' + number">{{ number }}</option>
                </optgroup>
                <optgroup label="Contact Fields">
                  <option v-for="field in fields" v-bind:value="'##' + field.internalName" :key="'f-' + field.internalName">{{ field.name }}</option>
                </optgroup>
              </select>
            </div>
          </div>
          <div class="column-right">
            <div class="form-group">
              <label>Recipient Field</label>
              <select v-model="instance.recipient_field" class="form-control">
                <option v-for="field in fields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Row 2: Custom Object | Country Field -->
        <div class="two-column-row">
          <div class="column-left">
            <div class="form-group">
              <label>Custom Object Mapping</label>
              <v-select
                :key="'co-action'"
                label="name"
                v-model="selectedCustomObject"
                :options="comap"
                @search="fetchOptionsmap"
                @input="onCustomObjectChange"
                placeholder="Select Custom Object">
                <template #no-options>
                  <span v-if="loadingCustomObjects">Loading...</span>
                  <span v-else>Type to search</span>
                </template>
              </v-select>
            </div>
          </div>
          <div class="column-right">
            <div class="form-group">
              <label>Country Field</label>
              <select v-model="instance.country_field" class="form-control">
                <option v-if="instance.program_coid" value="Country">Contact Country</option>
                <option v-for="field in countryfields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Loading indicator -->
        <div v-if="loadingFields" style="padding: 20px; text-align: center;">
          <div class="spinner"></div>
          <span>Loading custom object fields...</span>
        </div>

        <!-- CDO Field Mappings (when custom object selected) -->
        <div v-else-if="instance.custom_object_id">
          <!-- Row 3: Mobile | Email -->
          <div class="two-column-row">
            <div class="column-left">
              <div class="form-group">
                <label>Map Contact Mobile To</label>
                <select v-model="instance.mobile_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
            <div class="column-right">
              <div class="form-group">
                <label>Map Contact Email To *</label>
                <select v-model="instance.email_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Row 4: Campaign Title | Notification -->
          <div class="two-column-row">
            <div class="column-left">
              <div class="form-group">
                <label>Map Campaign Title To</label>
                <select v-model="instance.title_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
            <div class="column-right">
              <div class="form-group">
                <label>Map Notification To</label>
                <select v-model="instance.notification_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Row 5: Outgoing Message | Virtual Number -->
          <div class="two-column-row">
            <div class="column-left">
              <div class="form-group">
                <label>Map Outgoing Message To</label>
                <select v-model="instance.outgoing_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
            <div class="column-right">
              <div class="form-group">
                <label>Map Virtual Number To</label>
                <select v-model="instance.vn_field" class="form-control">
                  <option value="">-- Select Field --</option>
                  <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- Message (Full Width) -->
        <div class="full-width">
          <div class="form-group">
            <div class="label-with-checkbox">
              <label>Message</label>
              <div class="checkbox-wrapper">
                <label>Merge</label>
                <input type="checkbox" v-model="showMerge">
              </div>
            </div>
            
            <!-- Merge Toolbar -->
            <div v-if="showMerge" class="merge-toolbar">
              <div class="merge-toolbar-row">
                <div class="merge-section" style="width: 150px;">
                  <label>Contact Field</label>
                  <select v-model="selectedContactField" @change="insertMerge(selectedContactField)" class="form-control">
                    <option value="">Choose field</option>
                    <option v-for="field in contactFields" v-bind:value="field.value" :key="field.value">{{ field.name }}</option>
                  </select>
                </div>
                
                <div class="merge-section" style="width: 150px;">
                  <label>Custom Object</label>
                  <v-select
                    v-model="selectedMergeCDO"
                    label="name"
                    :options="comerge"
                    @search="fetchOptionsmerge"
                    @input="loadMergeCDOFields"
                    placeholder="Select Object">
                  </v-select>
                </div>
                
                <div class="merge-section" style="width: 150px;" v-if="selectedMergeCDO">
                  <label>CDO Field</label>
                  <select v-model="selectedCDOField" @change="insertMerge(selectedCDOField)" class="form-control">
                    <option value="">Choose field</option>
                    <option v-for="field in cdoMergeFields" v-bind:value="field.value" :key="field.value">{{ field.name }}</option>
                  </select>
                </div>
                
                <div class="merge-section" style="width: 100px;">
                  <label>If Multiple</label>
                  <select v-model="instance.send_mode" class="form-control">
                    <option value="all">All</option>
                    <option value="first">First</option>
                    <option value="last">Last</option>
                  </select>
                </div>
              </div>
            </div>
            
            <textarea 
              ref="messageTextarea"
              v-model="instance.message" 
              class="form-control" 
              rows="5" 
              placeholder="Enter your text message here, you can send up to 4 joined messages of 153 characters each.

Standardised opt out message can be removed if not legally required. Please see your local SPAM compliance rules on use.

Opt-out reply STOP"></textarea>
          </div>
        </div>

        <!-- Tracked Link (Full Width) -->
        <div class="full-width">
          <div class="form-group">
            <label>Tracked Link</label>
            <textarea 
              v-model="instance.tracked_link" 
              class="form-control" 
              rows="2" 
              placeholder="Add [tracked-link] to your message and place your url here to use tracked link feature"></textarea>
          </div>
        </div>

        <!-- Message Expiry -->
        <div class="full-width">
          <div class="form-group">
            <label>Pending Message Expiry</label>
            <div>
              <select v-model="instance.message_expiry" style="width:100px; display:inline-block; margin-right: 10px;" class="form-control">
                <option value="YES">YES</option>
                <option value="NO">NO</option>
              </select>
              <span style="margin-right: 10px;">If message undeliverable stop trying after</span>
              <select v-model="instance.message_validity" style="width:100px; display:inline-block;" class="form-control">
                <% for(var j=1; j<= 10; j++) { %>
                <option value="<%= j %>"><%= j %> HR</option>
                <% } %>
              </select>
            </div>
          </div>
        </div>

        <!-- Test SMS -->
        <div class="full-width">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
              <select v-model="consumer.default_country" style="width:100px; display:inline-block; margin-right: 5px;" class="form-control">
                <option v-for="country in countries" v-bind:value="country.name" :key="country.name">
                  {{ country.alpha2 + country.countryCallingCodes[0] }}
                </option>
              </select>
              <input type="text" v-model="instance.test_phone" style="width:150px; display:inline-block; margin-right: 5px;" class="form-control" placeholder="Phone number"/>
              <button @click.prevent="testSMS" type="button" class="btn btn-default">Test SMS</button>
            </div>
            <div>
              <button @click.prevent="saveInstance" type="button" class="btn btn-default" :disabled="saving">
                <span v-if="!saving">SAVE</span>
                <span v-if="saving">Saving...</span>
              </button>
            </div>
          </div>
        </div>

        <div v-if="status.success || status.error" v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" class="alert fade" role="alert" style="margin-top: 20px;">
          {{ status.success || status.error }}
        </div>
      </form>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
    <script src="/eloqua-service/assets/js/axios.min.js"></script>
    <script src="https://unpkg.com/vue-select@3.0.0"></script>

    <script type="text/javascript">
      var instance = <%-JSON.stringify(instance)%>;
      var custom_objects = <%-JSON.stringify(custom_objects)%>;
      var merge_fields = <%-JSON.stringify(merge_fields)%>;

      if(!instance.send_mode){
        instance.send_mode = "all";
      }

      console.log('Instance loaded:', instance);

      Vue.component('v-select', VueSelect.VueSelect);
      
      var comap = JSON.parse(JSON.stringify(custom_objects.elements || []));
      var comerge = JSON.parse(JSON.stringify(custom_objects.elements || []));

      // Build contact fields for merge
      var contactFields = [
        {name: 'Tracked Link', value: '[tracked-link]'},
        {name: 'Unsub Reply Link', value: '[unsub-reply-link]'}
      ];
      
      merge_fields.forEach(function(field){
        contactFields.push({
          name: field.name, 
          value: '[C_' + field.internalName + ']'
        });
      });

      var app = new Vue({
        el: '#sendsmsaction',
        data: {
          instance: instance,
          consumer: <%-JSON.stringify(consumer)%>,
          status: {},
          countries: <%-JSON.stringify(countries)%>,
          custom_objects: custom_objects,
          comap: comap,
          comerge: comerge,
          fields: merge_fields,
          cdofields: [],
          recipientfields: merge_fields,
          countryfields: merge_fields,
          fade: false,
          saving: false,
          loadingCustomObjects: false,
          loadingFields: false,
          loadingSenderIds: false,
          sender_ids: <%-JSON.stringify(sender_ids)%>,
          selectedCustomObject: null,
          previousCustomObjectId: null,
          customObjectsCache: {},
          fieldsCache: {},
          showMerge: false,
          contactFields: contactFields,
          selectedContactField: '',
          selectedMergeCDO: null,
          selectedCDOField: '',
          cdoMergeFields: []
        },
        methods: {
          loadSenderIds: function() {
            var vm = this;
            vm.loadingSenderIds = true;
            
            console.log('Loading sender IDs...');
            
            axios.get('/eloqua/action/ajax/sender-ids/' + vm.consumer.installId + '/' + vm.consumer.SiteId)
              .then(function(response) {
                console.log('Sender IDs response:', response.data);
                
                if (response.data.result && response.data.result.caller_ids) {
                  vm.sender_ids = response.data.result.caller_ids;
                  console.log('Sender IDs loaded:', vm.sender_ids);
                }
                
                vm.loadingSenderIds = false;
              })
              .catch(function(error) {
                console.error('Error loading sender IDs:', error);
                vm.loadingSenderIds = false;
              });
          },
          
          insertMerge: function(value) {
            if (!value) return;
            
            var textarea = this.$refs.messageTextarea;
            var startPos = textarea.selectionStart;
            var endPos = textarea.selectionEnd;
            var currentText = this.instance.message || '';
            
            this.instance.message = currentText.substring(0, startPos) + value + currentText.substring(endPos);
            
            var vm = this;
            this.$nextTick(function() {
              textarea.focus();
              var newPos = startPos + value.length;
              textarea.setSelectionRange(newPos, newPos);
            });
            
            // Reset selections
            this.selectedContactField = '';
            this.selectedCDOField = '';
          },
          
          loadMergeCDOFields: function(cdo) {
            if (!cdo) {
              this.cdoMergeFields = [];
              return;
            }
            
            var vm = this;
            axios.get('/eloqua/action/ajax/customobject/' + this.consumer.installId + '/' + this.consumer.SiteId + '/' + cdo.id)
              .then(function(response) {
                vm.cdoMergeFields = [];
                response.data.fields.forEach(function(field) {
                  vm.cdoMergeFields.push({
                    name: field.name,
                    value: '{{CustomObject<' + cdo.id + '>.Field<' + field.id + '>}}'
                  });
                });
              })
              .catch(function(error) {
                console.error('Error loading CDO fields:', error);
              });
          },
          
          fetchOptionsmerge: function(search, loading) {
            var vm = this;
            
            axios.get('/eloqua/action/ajax/customobjects/' + this.consumer.installId + '/' + this.consumer.SiteId + '/customObject?search=' + encodeURIComponent(search || ''))
              .then(function(response) {
                vm.comerge = response.data.elements || [];
              })
              .catch(function(error) {
                vm.comerge = JSON.parse(JSON.stringify(custom_objects.elements || []));
              });
          },
          
          fetchOptionsmap: function(search, loading){
            var vm = this;
            
            var cacheKey = search || 'all';
            if (vm.customObjectsCache[cacheKey]) {
              vm.comap = vm.customObjectsCache[cacheKey];
              if (loading) loading(false);
              vm.resolveSelectedObject();
              return;
            }
            
            if (loading) loading(true);
            vm.loadingCustomObjects = true;

            axios.get('/eloqua/action/ajax/customobjects/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/customObject?search=' + encodeURIComponent(search || ''))
              .then(function(response){
                vm.comap = response.data.elements || [];
                vm.customObjectsCache[cacheKey] = vm.comap;
                vm.resolveSelectedObject();
                if (loading) loading(false);
                vm.loadingCustomObjects = false;
              })
              .catch(function (error) {
                console.error("Error loading custom objects:", error);
                vm.comap = JSON.parse(JSON.stringify(custom_objects.elements || []));
                if (loading) loading(false);
                vm.loadingCustomObjects = false;
              });
          },
          
          resolveSelectedObject: function() {
            var vm = this;
            var customObjectId = vm.instance.custom_object_id;
            
            if (customObjectId && !vm.selectedCustomObject) {
              var found = vm.comap.find(function(co) {
                return co.id == customObjectId;
              });
              
              if (found) {
                vm.selectedCustomObject = found;
              } else {
                vm.fetchSingleCustomObject(customObjectId);
              }
            }
          },
          
          fetchSingleCustomObject: function(customObjectId) {
            var vm = this;
            
            axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
              .then(function(response) {
                var customObject = {
                  id: response.data.id,
                  name: response.data.name
                };
                
                vm.selectedCustomObject = customObject;
                
                var exists = vm.comap.find(function(co) {
                  return co.id == customObject.id;
                });
                
                if (!exists) {
                  vm.comap.push(customObject);
                }
              })
              .catch(function(error) {
                console.error('Error fetching single custom object:', error);
              });
          },
          
          onCustomObjectChange: function(selectedObject) {
            var vm = this;
            var customObjectId = selectedObject ? selectedObject.id : null;
            var previousId = vm.previousCustomObjectId;
            
            vm.$set(vm.instance, 'custom_object_id', customObjectId);
            vm.selectedCustomObject = selectedObject;
            
            if (!customObjectId) {
              vm.clearFieldMappings();
              vm.cdofields = [];
              vm.previousCustomObjectId = null;
              return;
            }
            
            if (customObjectId !== previousId) {
              vm.clearFieldMappings();
              vm.cdofields = [];
              vm.previousCustomObjectId = customObjectId;
            }
            
            vm.getFields();
          },
          
          clearFieldMappings: function() {
            this.$set(this.instance, 'mobile_field', null);
            this.$set(this.instance, 'email_field', null);
            this.$set(this.instance, 'title_field', null);
            this.$set(this.instance, 'notification_field', null);
            this.$set(this.instance, 'outgoing_field', null);
            this.$set(this.instance, 'vn_field', null);
          },
          
          getFields: function(){
            var vm = this;
            var customObjectId = vm.instance.custom_object_id;
            
            if(!customObjectId){
              vm.cdofields = [];
              return;
            }
            
            if (vm.fieldsCache[customObjectId]) {
              vm.cdofields = vm.fieldsCache[customObjectId];
              return;
            }
            
            vm.loadingFields = true;
            
            axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
              .then(function(response){
                vm.cdofields = response.data.fields || [];
                vm.fieldsCache[customObjectId] = vm.cdofields;
                vm.loadingFields = false;
              })
              .catch(function (error) {
                console.error("Error fetching fields:", error);
                vm.cdofields = [];
                vm.loadingFields = false;
              });
          },
          
          getProgramFields: function(){
            var vm = this;
            if(this.instance.program_coid){
              axios.get('/eloqua/action/ajax/customobject/' + this.consumer.installId + '/' + this.consumer.SiteId + '/' + this.instance.program_coid)
                .then(function(response){
                  if(vm.instance.country_setting == "cf"){
                    vm.countryfields = response.data.fields;
                  }
                  else{
                    vm.countryfields = vm.recipientfields;
                  }
                  vm.fields = response.data.fields;
                })
                .catch(function (error) {
                  console.error("Error:", error);
                });
            }
            else{
              vm.countryfields = vm.fields;
            }
          },
          
          testSMS: function(){
            var testmessage = this.instance.message || '';
            var templated_fields = testmessage.match(/[^[\]]+(?=])/g);
            if (templated_fields) {
              templated_fields.forEach(function (field) {
                if(field.indexOf("tracked-link") == -1 && field.indexOf("unsub-reply-link") == -1){
                  var nfield = "\\[" + field + "\\]";
                  var msgrgex = new RegExp(nfield, "g");
                  testmessage = testmessage.replace(msgrgex, field.replace("C_", ""));
                }
              });
            }
            
            var data = {
              "message": testmessage,
              "caller_id": this.instance.caller_id
            };
            
            if(this.instance.tracked_link){
              data.tracked_link_url = this.instance.tracked_link;
            }
            
            axios.post('/eloqua/action/ajax/testsms/' + this.consumer.installId + '/' + this.consumer.SiteId + '/' + this.consumer.default_country + '/' + this.instance.test_phone, data)
              .then(function(response){
                alert("Message sent successfully!");
              })
              .catch(function (error) {
                var errorMsg = error.response?.data?.description || error.message || 'Failed to send test SMS';
                alert(errorMsg);
              });
          },
          
          saveInstance: function(){
            var vm = this;

            if(!vm.instance.custom_object_id){
              vm.instance.email_field = null;
              vm.instance.mobile_field = null;
              vm.instance.title_field = null;
              vm.instance.notification_field = null;
              vm.instance.outgoing_field = null;
              vm.instance.vn_field = null;
            }

            if(vm.instance.message){
              vm.saving = true;
              
              axios.post(location.pathname + location.search, {"instance": vm.instance})
                .then(function(response){
                  vm.saving = false;
                  vm.fade = true;
                  vm.status = { success: 'Configuration successfully updated' };
                  setTimeout(function() {
                    vm.fade = false;
                    vm.status = {};
                  }, 3000);
                })
                .catch(function (error) {
                  vm.saving = false;
                  vm.fade = true;
                  vm.status = { error: error.response?.data?.message || 'Failed to update instance!' };
                  setTimeout(function() {
                    vm.fade = false;
                    vm.status = {};
                  }, 3000);
                });
            }
            else{
              vm.status = { error: 'Message is required' };
              vm.fade = true;
              setTimeout(function() {
                vm.fade = false;
                vm.status = {};
              }, 3000);
            }
          }
        },
        mounted: function () {
          var vm = this;
          console.log('=== Action Config Mounted ===');
          
          vm.previousCustomObjectId = vm.instance.custom_object_id || null;
          
          // Load sender IDs from API
          vm.loadSenderIds();
          
          vm.fetchOptionsmap('', null);
          
          if (vm.instance.custom_object_id) {
            vm.getFields();
          }
          
          vm.getProgramFields();
        }
      });
    </script>
  </body>
</html>