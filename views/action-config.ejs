<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>TransmitSMS: Configure Action Service</title>

    <link href="/eloqua-service/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="/eloqua-service/assets/css/main.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
    <style type="text/css">
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
      }

      .container {
        background-color: white;
        padding: 30px;
        margin: 20px auto;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      h4 {
        margin-bottom: 30px;
      }

      /* Two column layout */
      .form-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        gap: 20px;
      }

      .form-col {
        flex: 1;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 14px;
      }

      .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        box-sizing: border-box;
      }

      .form-control:focus {
        outline: none;
        border-color: #4CAF50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
      }

      textarea.form-control {
        resize: vertical;
        font-family: monospace;
      }

      /* Alerts */
      .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
        opacity: 0;
        transition: opacity 0.3s;
      }

      .alert.in {
        opacity: 1;
      }

      .alert-success {
        background-color: #dff0d8;
        color: #3c763d;
        border: 1px solid #d6e9c6;
      }

      .alert-danger {
        background-color: #f2dede;
        color: #a94442;
        border: 1px solid #ebccd1;
      }

      /* Buttons */
      .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .btn-default {
        background-color: #4CAF50;
        color: white;
      }

      .btn-default:hover {
        background-color: #45a049;
      }

      .btn-default:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }

      /* Spinner */
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #4CAF50;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        display: inline-block;
        margin-right: 10px;
      }

      .loading-container {
        text-align: center;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 4px;
        margin: 20px 0;
      }

      /* v-select styling */
      .v-select {
        width: 100%;
      }

      .v-select .vs__dropdown-toggle {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 4px;
      }

      .v-select.vs--open .vs__dropdown-toggle {
        border-color: #4CAF50;
      }

      /* Test SMS section */
      .test-section {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 20px 0;
      }

      .test-section select,
      .test-section input {
        width: auto;
      }

      /* Button container */
      .button-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 2px solid #eee;
      }

      /* Full width sections */
      .full-width {
        width: 100%;
      }

      /* Message expiry */
      .expiry-section {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
      }

      .expiry-section select {
        width: 100px;
      }

      /* CDO Fields Section */
      .cdo-fields-section {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 4px;
        margin-top: 20px;
      }

      .cdo-fields-section h5 {
        margin-top: 0;
        margin-bottom: 15px;
        color: #333;
      }

      /* Placeholder text */
      .placeholder-text {
        text-align: center;
        padding: 40px;
        color: #999;
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <div id="sendsmsaction" class="container" style="max-width: 800px;">
      <h4 style="text-align: center;">
        <img src="/eloqua-service/assets/send-sms-el-icon.png" onerror="this.style.display='none'" style="vertical-align: middle; max-height: 40px;">&nbsp;Create your Text Message
      </h4>

      <!-- Status Messages -->
      <div v-if="status.success || status.error" 
           v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" 
           class="alert">
        {{ status.success || status.error }}
      </div>

      <!-- Row 1: Sender ID and Recipient Field -->
      <div class="form-row">
        <div class="form-col">
          <div class="form-group">
            <label>Sender ID</label>
            <select v-model="instance.caller_id" class="form-control">
              <option value="">Default</option>
              <option v-for="number in sender_ids['Virtual Number']" v-bind:value="number" :key="'vn-' + number">{{ number }}</option>
              <option v-for="number in sender_ids['Business Name']" v-bind:value="number" :key="'bn-' + number">{{ number }}</option>
              <option v-for="field in fields" v-bind:value="'##' + field.internalName" :key="'f-' + field.internalName">{{ field.name }}</option>
            </select>
          </div>
        </div>
        <div class="form-col">
          <div class="form-group">
            <label>Recipient Field</label>
            <select v-model="instance.recipient_field" class="form-control">
              <option v-for="field in fields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Row 2: Custom Object and Country Field -->
      <div class="form-row">
        <div class="form-col">
          <div class="form-group">
            <label>Custom Object Mapping</label>
            <v-select
              label="name"
              v-model="selectedCustomObject"
              :options="comap"
              @search="fetchOptionsmap"
              @input="onCustomObjectChange"
              placeholder="Select Custom Object">
              <template #no-options>
                <span v-if="loadingCustomObjects">Loading...</span>
                <span v-else>Type to search...</span>
              </template>
            </v-select>
          </div>
        </div>
        <div class="form-col">
          <div class="form-group">
            <label>Country Field</label>
            <select v-model="instance.country_field" class="form-control">
              <option v-if="instance.program_coid" value="Country">Contact Country</option>
              <option v-for="field in countryfields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
            </select>
          </div>
        </div>
      </div>

      <!-- CDO Field Mappings -->
      <div v-if="loadingFields" class="loading-container">
        <div class="spinner"></div>
        <span>Loading custom object fields...</span>
      </div>

      <div v-else-if="instance.custom_object_id" class="cdo-fields-section">
        <h5>Custom Object Field Mappings</h5>

        <!-- Row 3: Mobile and Email -->
        <div class="form-row">
          <div class="form-col">
            <div class="form-group">
              <label>Map Contact Mobile To</label>
              <select v-model="instance.mobile_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
          <div class="form-col">
            <div class="form-group">
              <label>Map Contact Email To *</label>
              <select v-model="instance.email_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Row 4: Campaign Title and Notification -->
        <div class="form-row">
          <div class="form-col">
            <div class="form-group">
              <label>Map Campaign Title To</label>
              <select v-model="instance.title_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
          <div class="form-col">
            <div class="form-group">
              <label>Map Notification To</label>
              <select v-model="instance.notification_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Row 5: Outgoing Message and Virtual Number -->
        <div class="form-row">
          <div class="form-col">
            <div class="form-group">
              <label>Map Outgoing Message To</label>
              <select v-model="instance.outgoing_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
          <div class="form-col">
            <div class="form-group">
              <label>Map Virtual Number To</label>
              <select v-model="instance.vn_field" class="form-control">
                <option value="">-- Select Field --</option>
                <option v-for="field in cdofields" v-bind:value="field.internalName" :key="field.internalName">{{ field.name }}</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <div v-else-if="!instance.custom_object_id" class="placeholder-text">
        Select a custom object above to map fields
      </div>

      <!-- Message Text Area (Full Width) -->
      <div class="form-group full-width" style="margin-top: 20px;">
        <label>Message</label>
        <textarea v-model="instance.message" 
                  class="form-control" 
                  rows="6" 
                  placeholder="Enter your text message here. You can send up to 4 joined messages of 153 characters each.

Standardised opt-out message can be removed if not legally required. Please see your local SPAM compliance rules.

Opt-out reply STOP"></textarea>
      </div>

      <!-- Tracked Link (Full Width) -->
      <div class="form-group full-width">
        <label>Tracked Link</label>
        <textarea v-model="instance.tracked_link" 
                  class="form-control" 
                  rows="2" 
                  placeholder="Add [tracked-link] to your message and place your URL here to use tracked link feature"></textarea>
      </div>

      <!-- Message Expiry -->
      <div class="form-group full-width">
        <label>Pending Message Expiry</label>
        <div class="expiry-section">
          <select v-model="instance.message_expiry" class="form-control">
            <option value="YES">YES</option>
            <option value="NO">NO</option>
          </select>
          <span>If message undeliverable stop trying after</span>
          <select v-model="instance.message_validity" class="form-control">
            <% for(var j=1; j<= 10; j++) { %>
            <option value="<%= j %>"><%= j %> HR</option>
            <% } %>
          </select>
        </div>
      </div>

      <!-- Test SMS and Save Buttons -->
      <div class="button-container">
        <div class="test-section">
          <select v-model="consumer.default_country" class="form-control" style="width: 80px;">
            <option v-for="country in countries" v-bind:value="country.name" :key="country.name">
              {{ country.alpha2 }}
            </option>
          </select>
          <input type="text" 
                 v-model="instance.test_phone" 
                 class="form-control" 
                 style="width: 150px;" 
                 placeholder="Phone number"/>
          <button type="button" @click="testSMS" class="btn btn-default">Test SMS</button>
        </div>
        <button type="button" 
                @click="saveInstance" 
                class="btn btn-default" 
                :disabled="saving">
          <span v-if="!saving">SAVE</span>
          <span v-if="saving">Saving...</span>
        </button>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
    <script src="/eloqua-service/assets/js/axios.min.js"></script>
    <script src="https://unpkg.com/vue-select@3.0.0"></script>

    <script type="text/javascript">
      var instance = <%-JSON.stringify(instance)%>;
      var custom_objects = <%-JSON.stringify(custom_objects)%>;
      var merge_fields = <%-JSON.stringify(merge_fields)%>;
      var sender_ids = <%-JSON.stringify(sender_ids)%>;
      var consumer = <%-JSON.stringify(consumer)%>;
      var countries = <%-JSON.stringify(countries)%>;

      if(!instance.send_mode) {
        instance.send_mode = "all";
      }

      if(!instance.message_expiry) {
        instance.message_expiry = "YES";
      }

      if(!instance.message_validity) {
        instance.message_validity = "1";
      }

      console.log('Instance loaded:', instance);

      Vue.component('v-select', VueSelect.VueSelect);

      var app = new Vue({
        el: '#sendsmsaction',
        data: {
          instance: instance,
          consumer: consumer,
          status: {},
          countries: countries,
          comap: custom_objects.elements || [],
          fields: merge_fields,
          cdofields: [],
          countryfields: merge_fields,
          fade: false,
          saving: false,
          loadingCustomObjects: false,
          loadingFields: false,
          sender_ids: sender_ids,
          selectedCustomObject: null,
          previousCustomObjectId: null,
          customObjectsCache: {},
          fieldsCache: {}
        },
        methods: {
          fetchOptionsmap: function(search, loading) {
            var vm = this;
            
            var cacheKey = search || 'all';
            if (vm.customObjectsCache[cacheKey]) {
              vm.comap = vm.customObjectsCache[cacheKey];
              if (loading) loading(false);
              vm.resolveSelectedObject();
              return;
            }
            
            if (loading) loading(true);
            vm.loadingCustomObjects = true;

            axios.get('/eloqua/action/ajax/customobjects/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/customObject', {
              params: { search: search || '' }
            })
            .then(function(response) {
              vm.comap = response.data.elements || [];
              vm.customObjectsCache[cacheKey] = vm.comap;
              vm.resolveSelectedObject();
              if (loading) loading(false);
              vm.loadingCustomObjects = false;
            })
            .catch(function(error) {
              console.error("Error loading custom objects:", error);
              if (loading) loading(false);
              vm.loadingCustomObjects = false;
            });
          },

          resolveSelectedObject: function() {
            var vm = this;
            var customObjectId = vm.instance.custom_object_id;
            
            if (customObjectId && !vm.selectedCustomObject) {
              var found = vm.comap.find(function(co) {
                return co.id == customObjectId;
              });
              
              if (found) {
                console.log('Resolved custom object:', found.name);
                vm.selectedCustomObject = found;
              } else {
                vm.fetchSingleCustomObject(customObjectId);
              }
            }
          },

          fetchSingleCustomObject: function(customObjectId) {
            var vm = this;
            
            axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
              .then(function(response) {
                var customObject = {
                  id: response.data.id,
                  name: response.data.name
                };
                
                console.log('Fetched custom object:', customObject.name);
                vm.selectedCustomObject = customObject;
                
                if (!vm.comap.find(function(co) { return co.id == customObject.id; })) {
                  vm.comap.push(customObject);
                }
              })
              .catch(function(error) {
                console.error('Error fetching custom object:', error);
              });
          },

          onCustomObjectChange: function(selectedObject) {
            var vm = this;
            var customObjectId = selectedObject ? selectedObject.id : null;
            
            vm.instance.custom_object_id = customObjectId;
            vm.selectedCustomObject = selectedObject;
            
            if (!customObjectId) {
              vm.clearFieldMappings();
              vm.cdofields = [];
              vm.previousCustomObjectId = null;
              return;
            }
            
            if (customObjectId !== vm.previousCustomObjectId) {
              vm.clearFieldMappings();
              vm.previousCustomObjectId = customObjectId;
            }
            
            vm.getFields();
          },

          clearFieldMappings: function() {
            this.instance.mobile_field = null;
            this.instance.email_field = null;
            this.instance.title_field = null;
            this.instance.notification_field = null;
            this.instance.outgoing_field = null;
            this.instance.vn_field = null;
          },

          getFields: function() {
            var vm = this;
            var customObjectId = vm.instance.custom_object_id;
            
            if (!customObjectId) {
              vm.cdofields = [];
              return;
            }
            
            if (vm.fieldsCache[customObjectId]) {
              vm.cdofields = vm.fieldsCache[customObjectId];
              return;
            }
            
            vm.loadingFields = true;
            
            axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
              .then(function(response) {
                vm.cdofields = response.data.fields || [];
                vm.fieldsCache[customObjectId] = vm.cdofields;
                vm.loadingFields = false;
              })
              .catch(function(error) {
                console.error("Error fetching fields:", error);
                vm.cdofields = [];
                vm.loadingFields = false;
              });
          },

          testSMS: function() {
            if (!this.instance.test_phone) {
              alert('Please enter a phone number for testing');
              return;
            }

            var testmessage = this.instance.message || '';
            
            var data = {
              message: testmessage,
              caller_id: this.instance.caller_id
            };
            
            if (this.instance.tracked_link) {
              data.tracked_link_url = this.instance.tracked_link;
            }

            axios.post('/eloqua/action/ajax/testsms/' + this.consumer.installId + '/' + this.consumer.SiteId + '/' + this.consumer.default_country + '/' + this.instance.test_phone, data)
              .then(function(response) {
                alert("Test message sent successfully!");
              })
              .catch(function(error) {
                var errorMsg = error.response?.data?.description || error.message || 'Failed to send test SMS';
                alert(errorMsg);
              });
          },

          saveInstance: function() {
            var vm = this;

            if (!vm.instance.message) {
              vm.status = { error: 'Message is required' };
              vm.fade = true;
              setTimeout(function() {
                vm.fade = false;
                vm.status = {};
              }, 3000);
              return;
            }

            if (!vm.instance.custom_object_id) {
              vm.instance.email_field = null;
              vm.instance.mobile_field = null;
              vm.instance.title_field = null;
              vm.instance.notification_field = null;
              vm.instance.outgoing_field = null;
              vm.instance.vn_field = null;
            }

            vm.saving = true;

            axios.post(location.pathname + location.search, { instance: vm.instance })
              .then(function(response) {
                vm.saving = false;
                vm.fade = true;
                vm.status = { success: 'Configuration successfully updated' };

                setTimeout(function() {
                  vm.fade = false;
                  vm.status = {};
                }, 3000);
              })
              .catch(function(error) {
                vm.saving = false;
                vm.fade = true;
                vm.status = { error: error.response?.data?.message || 'Failed to update configuration' };

                setTimeout(function() {
                  vm.fade = false;
                  vm.status = {};
                }, 3000);
              });
          }
        },
        mounted: function() {
          var vm = this;
          console.log('Action config mounted');
          
          vm.previousCustomObjectId = vm.instance.custom_object_id || null;
          vm.fetchOptionsmap('', null);
          
          if (vm.instance.custom_object_id) {
            vm.getFields();
          }
        }
      });
    </script>
  </body>
</html>