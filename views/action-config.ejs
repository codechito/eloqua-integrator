<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>TransmitSMS: Configure Action Service</title>

    <link href="/eloqua-service/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="/eloqua-service/assets/css/main.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">
    
    <style type="text/css">
      .autocomplete {
        position: relative;
      }
      .autocomplete label {
        display: block;
        margin-bottom: 5px;
        font-size: 14px;
        font-weight: 100;
      }
      .autocomplete-input {
        padding: 7px 10px;
        width: 93%;
        border: 1px solid #ddd;
        border-radius: 4px;
        outline: none;
      }
      .autocomplete-input:focus {
        border-color: #000;
      }
      .autocomplete-list {
        position: absolute;
        z-index: 2;
        overflow: auto;
        min-width: 250px;
        max-height: 150px;
        margin: 0;
        margin-top: 5px;
        padding: 0;
        border: 1px solid #eee;
        list-style: none;
        border-radius: 4px;
        background-color: #fff;
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.05);
      }
      .autocomplete-list li {
        margin: 0;
        padding: 8px 15px;
        border-bottom: 1px solid #f5f5f5;
      }
      .autocomplete-list li:last-child {
        border-bottom: 0;
      }
      .autocomplete-list li:hover, .autocomplete-list li.active {
        background-color: #f5f5f5;
      }

      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
      }
      
      .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
        border-width: 0.1em;
      }
      
      @keyframes spinner-border {
        to { transform: rotate(360deg); }
      }

      .close {
        float: right;
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1;
        color: #000;
        text-shadow: 0 1px 0 #fff;
        opacity: .5;
        background: transparent;
        border: 0;
        cursor: pointer;
        padding: 0;
        margin: -5px -10px 0 0;
      }
      
      .close:hover {
        opacity: .75;
      }
    </style>
  </head>
  <body>
    <script type="text/x-template" id="autocomplete-tpl">
      <div class="autocomplete">
        <label :for="id" style="display: inline-block; max-width: 100%; margin-right: 450px; margin-bottom: 5px; font-weight: 700;">Message</label>
        <span v-if="message" style="font-size: 10px;">Merge Fields</span>
        <input v-if="message" type="checkbox" v-model="use_variable" style="margin-left: 5px;height: 10px;">
        
        <div style="display: flex; justify-content: space-around">
          <div v-if="message" v-show="use_variable" class="form-group" style="float: right; width:150px; margin: 5px;">
            <span style="font-size:10px;">Contact Field</span>
            <select v-model="contact_id" @change="Merge(contact_id)" style="width: 150px; height: 25px; font-size: 10px;" class="form-control">
              <option value="-">-- Select --</option>
              <option v-for="field in itemfields" v-bind:value="field.value" :key="field.value">{{ field.name }}</option>
            </select>
          </div>
          
          <div v-if="message" v-show="use_variable" class="form-group" style="float: right;width: 280px; margin: 5px;">
            <span style="font-size:10px; margin-left:5px;">Custom Object Field</span>
            <div style="display: flex; justify-content: left">
              <v-select
                label="name"
                style="width: 140px; height: 25px; font-size: 10px; margin-right: 5px;"
                v-model="cdo_id"
                :reduce="element => element.id"
                :options="comerge"
                @search="fetchOptionsmerge"
                @input="addFieldtoAutoComplete" >
              </v-select>
              <select v-model="cdo_field_id" @change="Merge(cdo_field_id)" v-show="cdo_id != '-'" style="width: 140px; height: 25px; font-size: 10px;" class="form-control">
                <option value="-">-- Select --</option>
                <option v-for="element in itemoptions" v-bind:value="element.value" :key="element.value">
                  {{ element.name }}
                </option>
              </select>
            </div>
          </div>
          
          <div v-if="message" v-show="use_variable" class="form-group" style="float: right;width: 120px;margin: 5px;">
            <span style="font-size:10px; margin-left:5px;">If multiple records found?</span>
            <select style="width: 110px;height: 25px;font-size: 10px;margin-left: 5px;" v-model="instance.send_mode" class="form-control">
              <option value="all">Send to All</option>
              <option value="first">Send to First</option>
              <option value="last">Send to Last</option>
            </select>
          </div>
        </div>

        <textarea v-model="instance.message" ref="tamessage" class="form-control" style="width: 565px" v-if="message" :id="id" :rows="rows" :cols="cols" class="autocomplete-input" :placeholder="placeholder" type="text"></textarea>
        <textarea v-model="instance.tracked_link" ref="talink" class="form-control" style="width: 565px" v-else-if="tracked_link" :id="id" :rows="rows" :cols="cols" class="autocomplete-input" :placeholder="placeholder" type="text"></textarea>
      </div>
    </script>

    <div class="disabler"></div>
    <div id="sendsmsaction" class="container" style="width: 600px;">
      <form method="post">
        <h4 style="font-size: 20px; font-weight: bold; text-align: center;">
          <img src="/eloqua-service/assets/send-sms-el-icon.png">&nbsp;Create your Text Message
        </h4>
        <br/>
        
        <!-- Main Status Messages -->
        <div v-if="status.success || status.error" v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" class="alert alert-dismissible fade" role="alert">
          {{ status.success || status.error }}
        </div>
        
        <div class="container-fluid">
          <!-- Sender ID and Recipient Field Row -->
          <div class="row">
            <div class="col-md-6" style="display: inline-block;width: 240px;vertical-align: top;margin-left: -10px;">
              <div class="form-group">
                <label for="caller_id">Sender ID</label><br>
                <select v-model="instance.caller_id" style="width: 240px; height: 35px;" class="form-control">
                  <option value="">Default</option>
                  <optgroup label="Virtual Numbers">
                    <option v-for="number in sender_ids['Virtual Number']" v-bind:value="number" :key="number">{{ number }}</option>
                  </optgroup>
                  <optgroup label="Business Names">
                    <option v-for="number in sender_ids['Business Name']" v-bind:value="number" :key="number">{{ number }}</option>
                  </optgroup>
                  <optgroup label="Contact Fields">
                    <option v-for="field in merge_fields" v-bind:value="'##' + field.internalName" :key="field.internalName">{{ field.name }}</option>
                  </optgroup>
                </select>
              </div>
            </div>
            <div class="col-md-6" style="width: 240px;float: right;margin-right: 20px;">
              <div class="form-group">
                <label for="recipient_field">Recipient Field</label><br/>
                <select v-model="instance.recipient_field" style="width: 240px; display:inline;" class="form-control">
                  <option v-for="field in merge_fields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
          </div>
          
          <!-- Custom Object and Country Field Row -->
          <div class="row">
            <div class="col-md-6" style="display: inline-block;width: 240px;vertical-align: top;margin-left: -10px;">
              <div class="form-group">
                <label for="custom_object">Custom Object Mapping</label><br>
                <v-select
                  label="name"
                  style="width: 240px; height: 35px;"
                  v-model="instance.custom_object_id"
                  :reduce="element => element.id"
                  :options="customObjects"
                  @search="fetchCustomObjects"
                  @input="onCustomObjectChange"
                  placeholder="Select Custom Object">
                </v-select>
              </div>
            </div>
            <div class="col-md-6" style="width: 240px;float: right;margin-right: 20px;">
              <div class="form-group">
                <label for="country_field">Country Field</label><br/>
                <select v-model="instance.country_field" style="width: 240px; height: 35px;" class="form-control">
                  <option value="Country">Contact Country</option>
                  <option v-for="field in merge_fields" v-bind:value="field.id ? field.id + '__' + field.internalName : field.internalName" :key="field.internalName">{{ field.name }}</option>
                </select>
              </div>
            </div>
          </div>
          
          <!-- Custom Object Field Mappings (shown when custom object is selected) -->
          <div v-if="instance.custom_object_id && currentFields.length > 0">
            <div class="row">
              <div class="col-md-6" style="display: inline-block;width: 240px;vertical-align: top;margin-left: -10px;">
                <div class="form-group">
                  <label>Map Contact Mobile To</label><br/>
                  <select v-model="instance.mobile_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-6" style="width: 240px;float: right;margin-right: 20px;">
                <div class="form-group">
                  <label>Map Contact Email To *</label><br/>
                  <select v-model="instance.email_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="row">
              <div class="col-md-6" style="display: inline-block;width: 240px;vertical-align: top;margin-left: -10px;">
                <div class="form-group">
                  <label>Map Campaign Title To</label><br/>
                  <select v-model="instance.title_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-6" style="width: 240px;float: right;margin-right: 20px;">
                <div class="form-group">
                  <label>Map Notification To</label><br/>
                  <select v-model="instance.notification_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="row">
              <div class="col-md-6" style="display: inline-block;width: 240px;vertical-align: top;margin-left: -10px;">
                <div class="form-group">
                  <label>Map Outgoing Message To</label><br/>
                  <select v-model="instance.outgoing_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-6" style="width: 240px;float: right;margin-right: 20px;">
                <div class="form-group">
                  <label>Map Virtual Number To</label><br/>
                  <select v-model="instance.vn_field" style="width:240px; text-align:left;" class="form-control">
                    <option value="">-- Select Field --</option>
                    <option v-for="field in currentFields" v-bind:value="field.internalName" :key="field.internalName">
                      {{ field.name }}
                    </option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Message Input -->
        <div class="form-group">
          <autocomplete label="Message" rows="5" placeholder='Enter your text message here, you can send up to 4 joined messages of 153 characters each. Please allow for extra characters if using a Merge field.&#10;&#10;Standardised opt out message can be removed if not legally required. Please see your local SPAM compliance rules on use.&#10;&#10;Opt-out reply STOP' message="true" />
        </div>
        
        <!-- Tracked Link Input -->
        <div class="form-group">
          <autocomplete label="Tracked Link" rows="3" placeholder="Add [tracked-link] to your message and place your url here to use tracked link feature" tracked_link="true" />
          <p style="font-size: 11px; color: #666;">
            <i>Add [tracked-link] placeholder in your message above. The URL here will be automatically shortened and tracked.</i>
          </p>
        </div>
        
        <!-- Message Expiry Settings -->
        <div class="form-group">
          <label for="message_expiry">Pending Message Expiry</label><br/>
          <select style="width:100px; display:inline;" v-model="instance.message_expiry" class="form-control">
            <option value="YES">YES</option>
            <option value="NO">NO</option>
          </select>
          <span> If message undeliverable stop trying after</span>
          <select style="width:100px; display:inline;" v-model="instance.message_validity" class="form-control">
            <option v-for="j in 10" v-bind:value="j" :key="j">{{ j }} HR</option>
          </select><br/><br/>
        </div>
        
        <!-- Test SMS Section -->
        <div style="margin: 20px 0; padding: 20px; background: #f9f9f9; border-radius: 4px; border: 1px solid #ddd;">
          <h5 style="font-weight: bold; margin-bottom: 15px; color: #333;">
            <i class="fa fa-paper-plane"></i> Test Your SMS
          </h5>
          
          <!-- Test SMS Status Messages -->
          <div v-if="testSmsStatus.success" class="alert alert-success" style="margin-bottom: 15px; animation: fadeIn 0.3s; position: relative;">
            <button type="button" class="close" @click="testSmsStatus = {}">&times;</button>
            <strong>✓ Success!</strong> {{ testSmsStatus.success }}
            <div v-if="testSmsStatus.details" style="margin-top: 10px; font-size: 12px; padding-left: 20px;">
              <div><strong>Message ID:</strong> {{ testSmsStatus.details.messageId }}</div>
              <div><strong>Sent to:</strong> {{ testSmsStatus.details.to }}</div>
              <div><strong>Message length:</strong> {{ testSmsStatus.details.messageLength }} characters</div>
              <div v-if="testSmsStatus.details.callbacks && (testSmsStatus.details.callbacks.dlr || testSmsStatus.details.callbacks.reply || testSmsStatus.details.callbacks.linkHits)">
                <strong>Callbacks configured:</strong>
                <ul style="margin: 5px 0; padding-left: 20px;">
                  <li v-if="testSmsStatus.details.callbacks.dlr">✓ Delivery Report Tracking</li>
                  <li v-if="testSmsStatus.details.callbacks.reply">✓ Reply Tracking</li>
                  <li v-if="testSmsStatus.details.callbacks.linkHits">✓ Link Click Tracking</li>
                </ul>
              </div>
            </div>
          </div>
          
          <div v-if="testSmsStatus.error" class="alert alert-danger" style="margin-bottom: 15px; animation: fadeIn 0.3s; position: relative;">
            <button type="button" class="close" @click="testSmsStatus = {}">&times;</button>
            <strong>✗ Error!</strong> {{ testSmsStatus.error }}
            <div v-if="testSmsStatus.description" style="margin-top: 5px; font-size: 12px; padding-left: 20px;">
              {{ testSmsStatus.description }}
            </div>
          </div>

          <div v-if="testingSms" class="alert alert-info" style="margin-bottom: 15px;">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="margin-right: 10px;"></span>
            <strong>Sending test SMS...</strong> Please wait.
          </div>

          <div style="display: flex; align-items: flex-end; gap: 10px;">
            <div style="flex: 0 0 150px;">
              <label style="font-weight: 600; margin-bottom: 5px; display: block;">Country Code</label>
              <select v-model="testSms.country" class="form-control">
                <option v-for="country in countries" v-bind:value="country.name" :key="country.name">
                  {{ country.alpha2 }} {{ country.countryCallingCodes[0] }}
                </option>
              </select>
            </div>
            
            <div style="flex: 1;">
              <label style="font-weight: 600; margin-bottom: 5px; display: block;">Phone Number</label>
              <input type="text" 
                     v-model="testSms.phone" 
                     class="form-control" 
                     placeholder="e.g., 9709996131"/>
            </div>
            
            <div>
              <button type="button" 
                      @click="sendTestSms()" 
                      class="btn btn-primary"
                      :disabled="testingSms || !testSms.phone || !instance.message"
                      style="white-space: nowrap;">
                <span v-if="testingSms">
                  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                  Sending...
                </span>
                <span v-else>
                  Send Test SMS
                </span>
              </button>
            </div>
          </div>
          
          <p style="font-size: 11px; color: #666; margin-top: 10px; margin-bottom: 0;">
            <i class="fa fa-info-circle"></i> Test SMS will use your current message configuration. Merge fields will be shown as placeholders.
          </p>
        </div>
        
        <!-- Save Button -->
        <button id="btnSave" type="button" v-on:click="saveInstance()" class="btn btn-default" style="margin: 20px auto; display: block;" :disabled="saving">
          <span v-if="!saving">SAVE</span>
          <span v-if="saving">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Saving...
          </span>
        </button>
        
        <br/><br/>
        <div v-if="status.success || status.error" v-bind:class="{ 'alert-success': status.success, 'alert-danger': status.error, 'in': fade }" class="alert alert-dismissible fade" role="alert">
          {{ status.success || status.error }}
        </div>
      </form>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"></script>
    <script src="/eloqua-service/assets/js/axios.min.js"></script>
    <script src="https://unpkg.com/vue-select@3.0.0"></script>

    <script type="text/javascript">
      // Parse server data
      var instance = <%-JSON.stringify(instance)%>;
      var consumer = <%-JSON.stringify(consumer)%>;
      var countries = <%-JSON.stringify(countries)%>;
      var sender_ids = <%-JSON.stringify(sender_ids)%>;
      var merge_fields = <%-JSON.stringify(merge_fields)%>;
      var custom_objects = <%-JSON.stringify(custom_objects)%>;

      if (!instance.send_mode) {
        instance.send_mode = "all";
      }

      if (!instance.message_expiry) {
        instance.message_expiry = "NO";
      }

      if (!instance.message_validity) {
        instance.message_validity = 1;
      }

      console.log('Instance loaded:', JSON.stringify(instance));

      Vue.component('v-select', VueSelect.VueSelect);
      
      var comap = JSON.parse(JSON.stringify(custom_objects.elements || []));
      var comerge = JSON.parse(JSON.stringify(custom_objects.elements || []));

      // Autocomplete component for merge fields
      var standardItems = ['[tracked-link]'];
      var itemoptions = [{name:'Choose object field', value:"-"}];
      var itemdetails = {'[tracked-link]':'[tracked-link]'};
      var itemfields = [
        {name:'Choose field', value:'-'}, 
        {name:'Tracked Link', value:'[tracked-link]'},
        {name:'Opt out', value:'Opt out reply STOP'}
      ];
      var objectdetails = {};
      
      custom_objects.elements.forEach(function(field){
        objectdetails[field.id] = field.name;
      });

      merge_fields.forEach(function(field){
        standardItems.push('[' + field.name + ']');
        itemdetails['[' + field.name + ']'] = '[C_' + field.internalName + ']';
        itemfields.push({name: field.name, value: '[C_' + field.internalName + ']'});
      });

      const Autocomplete = Vue.component("autocomplete", {
        template: "#autocomplete-tpl",
        props: ["model", "items", "itemoptions", "placeholder", "ref", "label", "message", "tracked_link", "rows", "cols", "cdo_field_id", "contact_id"],
        data() {
          return {
            id: 'input-' + parseInt(Math.random() * 1000),
            searchMatch: [],
            selectedIndex: 0,
            clickedChooseItem: false,
            wordIndex: 0,
            custom_objects: custom_objects,
            comerge: comerge,
            contact_fields: merge_fields,
            itemoptions: itemoptions,
            cdo_id: '-',
            cdo_field_id: '-',
            contact_id: '-',
            use_variable: false,
            itemfields: itemfields
          };
        },
        mounted() {
          const _self = this;
          this.cdo_field_id = '-';
          this.cdo_id = '-';
          this.contact_id = '-';
          itemoptions = [{name:'Choose object field', value:"-"}];
        },
        methods: {
          Merge(insert) {
            var vm = this;
            var tArea = this.$refs.tamessage || this.$refs.talink;
            
            if (insert === '-' || !insert) {
              return;
            }

            var startPos = tArea.selectionStart,
              endPos = tArea.selectionEnd,
              cursorPos = startPos,
              tmpStr = tArea.value;

            if (vm.message) {
              instance.message = tmpStr.substring(0, startPos) + insert + tmpStr.substring(endPos, tmpStr.length);
            } else {
              instance.tracked_link = tmpStr.substring(0, startPos) + insert + tmpStr.substring(endPos, tmpStr.length);
            }

            setTimeout(() => {
              cursorPos += insert.length;
              tArea.selectionStart = tArea.selectionEnd = cursorPos;
            }, 10);
          },
          
          fetchOptionsmerge: function(search, loading) {
            var vm = this;
            const options = {
              method: "GET",
              url: "/eloqua/action/ajax/customobjects/" + consumer.installId + "/" + consumer.SiteId + "/customObject?search=" + search
            };
            axios(options)
              .then(function(response) {
                vm.comerge = response.data.elements;
              })
              .catch(function (error) {
                vm.comerge = JSON.parse(JSON.stringify(custom_objects.elements));
              });
          },
          
          addFieldtoAutoComplete: function(value) {
            var vm = this;
            standardItems = ['[tracked-link]'];
            itemdetails = {'[tracked-link]':'[tracked-link]'};
            itemfields = [
              {name:'Choose field', value:'-'}, 
              {name:'Tracked Link', value:'[tracked-link]'},
              {name:'Opt out', value:'Opt out reply STOP'}
            ];
            itemoptions = [{name:'Choose object field', value:"-"}];
            
            merge_fields.forEach(function(field){
              standardItems.push('[' + field.name + ']');
              itemdetails['[' + field.name + ']'] = '[C_' + field.internalName + ']';
              itemfields.push({name: field.name, value: '[C_' + field.internalName + ']'});
            });

            if (vm.cdo_id) {
              const options = {
                method: "GET",
                url: "/eloqua/action/ajax/customobject/" + consumer.installId + "/" + consumer.SiteId + "/" + vm.cdo_id
              };
              axios(options)
                .then(function(response) {
                  response.data.fields.forEach(function(element) {
                    standardItems.push('{{' + element.name + '}}');
                    itemdetails['{{' + element.name + '}}'] = '{{CustomObject<' + vm.cdo_id + '>.Field<' + element.id + '>}}';
                    itemoptions.push({name: element.name, value: '{{CustomObject<' + vm.cdo_id + '>.Field<' + element.id + '>}}'});
                    vm.items = standardItems;
                    vm.itemoptions = itemoptions;
                  });
                })
                .catch(function (error) {
                  console.log(error);
                });
            }
          }
        }
      });

      var app = new Vue({
        el: '#sendsmsaction',
        data: {
          instance: instance,
          consumer: consumer,
          status: {},
          countries: countries,
          sender_ids: sender_ids,
          merge_fields: merge_fields,
          custom_objects: custom_objects,
          customObjects: custom_objects.elements || [],
          currentFields: [],
          comap: comap,
          fade: false,
          saving: false,
          loadingFields: false,
          
          // Test SMS data
          testSms: {
            country: consumer.default_country || 'Australia',
            phone: ''
          },
          testSmsStatus: {},
          testingSms: false
        },
        methods: {
          fetchCustomObjects: function(search, loading) {
            var vm = this;
            if (loading) loading(true);
            
            axios.get('/eloqua/action/ajax/customobjects/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/customObject', {
              params: { search: search || '', count: 100 }
            })
            .then(function(response) {
              vm.customObjects = response.data.elements || [];
              if (loading) loading(false);
            })
            .catch(function(error) {
              console.error('Error fetching custom objects:', error);
              if (loading) loading(false);
            });
          },
          
          onCustomObjectChange: function(customObjectId) {
            if (!customObjectId) {
              this.currentFields = [];
              return;
            }
            
            this.loadFieldsForCustomObject(customObjectId);
          },
          
          loadFieldsForCustomObject: function(customObjectId) {
            var vm = this;
            vm.loadingFields = true;
            
            axios.get('/eloqua/action/ajax/customobject/' + vm.consumer.installId + '/' + vm.consumer.SiteId + '/' + customObjectId)
              .then(function(response) {
                vm.currentFields = response.data.fields || [];
                vm.loadingFields = false;
              })
              .catch(function(error) {
                console.error('Error fetching fields:', error);
                vm.currentFields = [];
                vm.loadingFields = false;
              });
          },
          
          sendTestSms: function() {
            var vm = this;
            
            // Validate
            if (!vm.instance.message || !vm.instance.message.trim()) {
              vm.testSmsStatus = {
                error: 'Message is required',
                description: 'Please enter a message before sending test SMS'
              };
              return;
            }
            
            if (!vm.testSms.phone || !vm.testSms.phone.trim()) {
              vm.testSmsStatus = {
                error: 'Phone number is required',
                description: 'Please enter a phone number'
              };
              return;
            }
            
            // Clear previous status
            vm.testSmsStatus = {};
            vm.testingSms = true;
            
            console.log('Sending test SMS...', {
              phone: vm.testSms.phone,
              country: vm.testSms.country,
              messageLength: vm.instance.message.length
            });
            
            // Prepare payload
            var payload = {
              message: vm.instance.message,
              caller_id: vm.instance.caller_id || null,
              tracked_link_url: vm.instance.tracked_link || null
            };
            
            // Send test SMS
            axios.post(
              '/eloqua/action/ajax/testsms/' + 
              vm.consumer.installId + '/' + 
              vm.consumer.SiteId + '/' + 
              vm.testSms.country + '/' + 
              vm.testSms.phone,
              payload
            )
            .then(function(response) {
              console.log('Test SMS sent successfully', response.data);
              
              vm.testSmsStatus = {
                success: 'Test SMS sent successfully!',
                details: {
                  messageId: response.data.messageId,
                  to: response.data.to,
                  messageLength: response.data.messageLength,
                  callbacks: response.data.callbacks
                }
              };
              
              vm.testingSms = false;
              
              // Auto-hide success message after 10 seconds
              setTimeout(function() {
                if (vm.testSmsStatus.success) {
                  vm.testSmsStatus = {};
                }
              }, 10000);
            })
            .catch(function(error) {
              console.error('Test SMS failed', error);
              
              vm.testSmsStatus = {
                error: error.response?.data?.error || 'Failed to send test SMS',
                description: error.response?.data?.description || error.message
              };
              
              vm.testingSms = false;
            });
          },
          
          saveInstance() {
            var vm = this;

            if (!vm.instance.custom_object_id) {
              vm.instance.email_field = null;
              vm.instance.mobile_field = null;
              vm.instance.title_field = null;
              vm.instance.notification_field = null;
              vm.instance.outgoing_field = null;
              vm.instance.vn_field = null;
            }

            if (vm.instance.message) {
              vm.saving = true;
              
              const options = {
                method: "POST",
                url: location.pathname + location.search,
                headers: { 'Content-Type': 'application/json' },
                data: JSON.stringify({"instance": vm.instance})
              };
              
              axios(options)
                .then(function(response) {
                  vm.saving = false;
                  vm.fade = true;
                  console.log(response);
                  vm.status = {
                    success: 'Configuration successfully updated'
                  };

                  setTimeout(() => {
                    vm.fade = false;
                    vm.status = {};
                  }, 3000);
                })
                .catch(function (error) {
                  vm.saving = false;
                  vm.fade = true;
                  console.log(error);
                  vm.status = {
                    error: 'Failed to update instance! '
                  };

                  setTimeout(() => {
                    vm.fade = false;
                    vm.status = {};
                  }, 3000);
                });
            } else {
              vm.status = {
                error: 'Message is required'
              };
              vm.fade = true;
              setTimeout(() => {
                vm.fade = false;
                vm.status = {};
              }, 3000);
            }
          }
        },
        mounted: function () {
          var vm = this;
          console.log('Action configuration loaded');
          
          // Set default test country from consumer
          if (vm.consumer.default_country) {
            vm.testSms.country = vm.consumer.default_country;
          }
          
          // Load fields if custom object is already selected
          if (vm.instance.custom_object_id) {
            vm.loadFieldsForCustomObject(vm.instance.custom_object_id);
          }
        }
      });
    </script>
  </body>
</html>